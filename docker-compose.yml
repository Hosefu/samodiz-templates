version: '3.8'

services:
  db:
    image: postgres:15-alpine
    container_name: db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - samodes-network

  redis:
    image: redis:7-alpine
    container_name: redis
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - samodes-network

  minio:
    image: minio/minio:latest
    container_name: minio
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"   # API
      - "9001:9001"   # Console
    volumes:
      # Закомментируем volume для разработки - MinIO будет пересоздаваться
      # - minio_data:/data
      - ./minio/entrypoint.sh:/entrypoint.sh:ro
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin123
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    entrypoint: ["/entrypoint.sh"]
    networks:
      - samodes-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend
    volumes:
      - ./backend:/app
      - storage_data:/app/storage
      - static_data:/app/staticfiles
    expose:
      - "${BACKEND_PORT}"
    environment:
      - DEBUG=1
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:${BACKEND_PORT}/api/health/"]
      interval: 5s
      timeout: 5s
      retries: 5
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - samodes-network

  pdf-renderer:
    build:
      context: ./pdf-renderer
      dockerfile: Dockerfile
    container_name: pdf-renderer
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://0.0.0.0:8081
    expose:
      - "8081"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8081/health"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - samodes-network

#  png-renderer:
#    build:
#      context: ./png-renderer
#      dockerfile: Dockerfile
#    container_name: png-renderer
#    expose:
#      - "${PNG_PORT}"
#    healthcheck:
#      test: ["CMD", "curl", "--fail", "http://localhost:${PNG_PORT}/api/png/health"]
#      interval: 5s
#      timeout: 5s
#      retries: 5
#    networks:
#      - samodes-network

  nginx:
    image: nginx:alpine
    container_name: nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - static_data:/usr/share/nginx/html/static
      - media_data:/usr/share/nginx/html/media
    ports:
      - "80:80"
    depends_on:
      - backend
      - pdf-renderer
#      - png-renderer
    networks:
      - samodes-network

#  frontend:
#    build:
#      context: ./frontend
#      dockerfile: Dockerfile
#    container_name: frontend
#    volumes:
#      - ./frontend:/app
#      - /app/node_modules
#    ports:
#      - "${FRONTEND_PORT}:${FRONTEND_PORT}"
#    environment:
#      - VITE_API_URL=http://localhost:${BACKEND_PORT}
#    depends_on:
#      - backend
#    networks:
#      - samodes-network

  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: celery
    command: celery -A core worker -l INFO
    volumes:
      - ./backend:/app
    environment:
      - DEBUG=1
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - backend
      - redis
    networks:
      - samodes-network

  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: celery-beat
    command: celery -A core beat -l INFO
    volumes:
      - ./backend:/app
    environment:
      - DEBUG=1
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - backend
      - redis
    networks:
      - samodes-network

volumes:
  postgres_data:
  redis_data:
  storage_data:
  static_data:
  media_data:
  minio_data:

networks:
  samodes-network:
    driver: bridge