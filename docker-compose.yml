version: '3.8'

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    expose:
      - "5173"
    environment:
      - VITE_API_URL=http://localhost/api
      - VITE_STORAGE_URL=http://localhost/storage
      - VITE_PDF_URL=http://localhost/pdf
      - VITE_PNG_URL=http://localhost/png

  storage-service:
    build:
      context: ./storage
      dockerfile: Dockerfile
    container_name: storage-service
    env_file:
      - .env
    volumes:
      - media_data:/app/media
      - static_data:/app/staticfiles
    expose:
      - "3000"
    command: >
      sh -c "
        mkdir -p /app/media/generated_templates &&
        chmod 777 /app/media/generated_templates &&
        python manage.py migrate &&
        python manage.py collectstatic --noinput &&
        gunicorn storage.wsgi:application --bind 0.0.0.0:3000
      "
    environment:
      - API_KEY=development-api-key
      - DJANGO_DEBUG=True

  render-routing-service:
    build:
      context: ./render-routing
      dockerfile: Dockerfile
    container_name: render-routing-service
    env_file:
      - .env
    expose:
      - "3000"
    depends_on:
      - storage-service
      - pdf-renderer
      - png-renderer
    environment:
      - SERVER_PORT=3000
      - RENDERERS_PDF_RENDERER=http://pdf-renderer:3000/api/pdf/render
      - RENDERERS_PNG_RENDERER=http://png-renderer:3000/api/png/render
      - STORAGE_API_BASE_URL=http://storage-service:3000/api
      - STORAGE_API_KEY=development-api-key
      - LOGGER_LEVEL=info

  pdf-renderer:
    build:
      context: ./pdf-renderer
      dockerfile: Dockerfile
    container_name: pdf-renderer
    env_file:
      - .env
    volumes:
      - pdf_data:/app/wwwroot
    expose:
      - "3000"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:3000
      - Logging__LogLevel__Default=Debug
      - Logging__LogLevel__PdfRenderer=Debug

  png-renderer:
    build:
      context: ./png-renderer
      dockerfile: Dockerfile
    container_name: png-renderer
    env_file:
      - .env
    volumes:
      - png_data:/app/output
    expose:
      - "3000"
    environment:
      - PNG_RENDERER_HOST=0.0.0.0
      - PNG_RENDERER_PORT=3000
      - PNG_RENDERER_LOG_LEVEL=INFO
      - PNG_RENDERER_CACHE_ENABLED=True
      - PNG_RENDERER_BROWSER_HEADLESS=True
      - PNG_RENDERER_MAX_CONCURRENT_BROWSERS=5

  nginx:
    build:
      context: .
      dockerfile: nginx/Dockerfile
    ports:
      - "80:80"
    depends_on:
      - frontend
      - storage-service
      - render-routing-service
      - pdf-renderer
      - png-renderer
    volumes:
      - static_data:/usr/share/nginx/html/static
      - media_data:/usr/share/nginx/html/media
      - pdf_data:/usr/share/nginx/html/pdfs
      - png_data:/usr/share/nginx/html/images

volumes:
  media_data:
  static_data:
  pdf_data:
  png_data: