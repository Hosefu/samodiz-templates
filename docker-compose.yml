version: '3.8'

services:
  storage:
    build:
      context: ./storage
      dockerfile: Dockerfile
    container_name: storage
    env_file:
      - .env
    volumes:
      - media_data:/app/media
      - static_data:/app/staticfiles
    expose:
      - "8000"
    command: >
      sh -c "
        python manage.py migrate &&
        python manage.py collectstatic --noinput &&
        gunicorn storage.wsgi:application --bind 0.0.0.0:8000
      "
    environment:
      - API_KEY=development-pdf-api-key
      - DJANGO_DEBUG=True

  pdf-service:
    build:
      context: ./pdf-generation-service
      dockerfile: Dockerfile
    container_name: pdf-service
    env_file:
      - .env
    volumes:
      - pdf_data:/app/wwwroot
    expose:
      - "8080"
    command: ["dotnet", "pdf-generation-service.dll"]
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - DOTNET_ENVIRONMENT=Development
      - Logging__LogLevel__Default=Debug
      - Logging__LogLevel__PdfGenerator=Debug
      - ApiKey=development-pdf-api-key

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    env_file:
      - .env  # Здесь мы подгружаем переменные окружения из .env
    # Собираем фронтенд заранее, чтобы папка ./frontend/build появилась локально
    command: >
      sh -c "
        export $(grep ^REACT_APP_ .env | xargs) &&
        npm ci &&
        npm run build &&
        sleep infinity
      "
    volumes:
      - ./frontend/build:/app/build

  nginx:
    build:
      context: .
      dockerfile: nginx/Dockerfile
    ports:
      - "80:80"
    depends_on:
      - storage
      - pdf-service
      - frontend
    volumes:
      - ./frontend/build:/usr/share/nginx/html
      - static_data:/usr/share/nginx/html/static
    # Убираем монтирование media, так как теперь проксируем запросы к storage
    # - media_data:/usr/share/nginx/html/media
      - pdf_data:/usr/share/nginx/html/pdfs

volumes:
  media_data:
  static_data:
  pdf_data: