version: '3.8'

services:
  db:
    image: postgres:15-alpine
    container_name: db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_DB=${DB_NAME:-samodesdb}
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  redis:
    image: redis:7-alpine
    container_name: redis
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    environment:
      - VITE_API_URL=http://localhost/api
      - VITE_STORAGE_URL=http://localhost/storage
      - VITE_PDF_URL=http://localhost/pdf
      - VITE_PNG_URL=http://localhost/png
      - VITE_JWT_SECRET=${JWT_SECRET:-your-jwt-secret-key}
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - ./frontend/nginx.conf:/etc/nginx/conf.d/default.conf

  pdf-renderer:
    build:
      context: ./pdf-renderer
      dockerfile: Dockerfile
    container_name: pdf-renderer
    env_file:
      - .env
    volumes:
      - pdf_data:/app/wwwroot
    expose:
      - "${PDF_PORT:-8081}"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:${PDF_PORT:-8081}
      - Logging__LogLevel__Default=Debug
      - Logging__LogLevel__PdfRenderer=Debug
      - API_KEY=${API_KEY:-development-pdf-api-key}
      - JWT_SECRET=${JWT_SECRET:-your-jwt-secret-key}
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:${PDF_PORT:-8081}/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  png-renderer:
    build:
      context: ./png-renderer
      dockerfile: Dockerfile
    container_name: png-renderer
    env_file:
      - .env
    volumes:
      - png_data:/app/output
    expose:
      - "${PNG_PORT:-8082}"
    environment:
      - PNG_RENDERER_HOST=0.0.0.0
      - PNG_RENDERER_PORT=${PNG_PORT:-8082}
      - PNG_RENDERER_LOG_LEVEL=INFO
      - PNG_RENDERER_CACHE_ENABLED=True
      - PNG_RENDERER_BROWSER_HEADLESS=True
      - PNG_RENDERER_MAX_CONCURRENT_BROWSERS=5
      - API_KEY=${API_KEY:-development-pdf-api-key}
      - JWT_SECRET=${JWT_SECRET:-your-jwt-secret-key}
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:${PNG_PORT:-8082}/api/png/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  nginx:
    build:
      context: .
      dockerfile: nginx/Dockerfile
    ports:
      - "80:80"
    depends_on:
      frontend:
        condition: service_started
      backend:
        condition: service_healthy
      pdf-renderer:
        condition: service_healthy
      png-renderer:
        condition: service_healthy
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - static_data:/usr/share/nginx/html/static:ro
      - media_data:/usr/share/nginx/html/media:ro
      - pdf_data:/usr/share/nginx/html/pdfs:ro
      - png_data:/usr/share/nginx/html/images:ro

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend
    env_file:
      - .env
    volumes:
      - ./backend:/app
      - /app/venv
      - media_data:/app/media
      - static_data:/app/staticfiles
    expose:
      - "${BACKEND_PORT:-8000}"
    command: >
      sh -c "
        python manage.py migrate &&
        python manage.py collectstatic --noinput &&
        gunicorn core.wsgi:application --bind 0.0.0.0:${BACKEND_PORT:-8000}
      "
    environment:
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY:-your-secret-key}
      - JWT_SECRET=${JWT_SECRET:-your-jwt-secret-key}
      - DEBUG=1
      - BACKEND_PORT=${BACKEND_PORT:-8000}
      - DB_NAME=${DB_NAME:-samodesdb}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - DB_HOST=${DB_HOST:-db}
      - DB_PORT=${DB_PORT:-5432}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:${BACKEND_PORT:-8000}/api/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: celery
    env_file:
      - .env
    volumes:
      - ./backend:/app
      - /app/venv
    command: celery -A core worker -l INFO
    environment:
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY:-your-secret-key}
      - JWT_SECRET=${JWT_SECRET:-your-jwt-secret-key}
      - DEBUG=1
      - DB_NAME=${DB_NAME:-samodesdb}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - DB_HOST=${DB_HOST:-db}
      - DB_PORT=${DB_PORT:-5432}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
    depends_on:
      - db
      - redis
      - backend

  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: celery-beat
    env_file:
      - .env
    volumes:
      - ./backend:/app
      - /app/venv
    command: celery -A core beat -l INFO
    environment:
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY:-your-secret-key}
      - JWT_SECRET=${JWT_SECRET:-your-jwt-secret-key}
      - DEBUG=1
      - DB_NAME=${DB_NAME:-samodesdb}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - DB_HOST=${DB_HOST:-db}
      - DB_PORT=${DB_PORT:-5432}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
    depends_on:
      - db
      - redis
      - backend

volumes:
  media_data:
  static_data:
  pdf_data:
  png_data:
  postgres_data:
  redis_data: